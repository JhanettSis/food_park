<?php
echo '
Setting Up a New Laravel Project for Food Park
---------------------- First part - Create and set up the laravel new project ------------------

1. Install Laravel and Set Up a New Project
+++++ Here  Command: composer global require laravel/installer
This globally installs the Laravel installer on your system.
+++++ Here  Command: laravel new food_park
Creates a new Laravel project named food_park.
Navigate to the project folder:
+++++ Here  Command: cd food_park
Open the project in Visual Studio Code:
+++++ Here  Command: code .
---------------------------------------------------------------------------------------------------------------------

2. Install Laravel Breeze (For Authentication Scaffolding)
Breeze simplifies adding authentication functionality using Blade templates.
+++++ Here  Command: composer require laravel/breeze --dev
+++++ Here  Command: php artisan breeze:install blade
This sets up basic authentication views using Blade.
---------------------------------------------------------------------------------------------------------------------

3. Configure Database
Update the .env file with the following database configuration:
makefile

=====
DB_CONNECTION=pgsql
DB_HOST=localhost
DB_PORT=5434
DB_DATABASE=db_food_park
DB_USERNAME=postgres
DB_PASSWORD=AdminJna**

Details:
Uses PostgreSQL as the database.
Ensure that the db_food_park database is created in your PostgreSQL instance.
Update the port, username, and password as per your setup.
Run the migrations:

+++++ Here  Command: php artisan migrate

This applies the default migrations (users, password resets, etc.) to set up your database tables.
---------------------------------------------------------------------------------------------------------------------

4. Install Laravel IDE Helper
To improve code completion and hints in IDEs:

+++++ Here  Command: composer require --dev barryvdh/laravel-ide-helper

Generate helper files:

+++++ Here  Command: php artisan ide-helper:generate
---------------------------------------------------------------------------------------------------------------------

Adding Features to Food Park
1. Seeders and Controllers
Create a seeder for the users table to populate initial data:

    +++++ Here  Command: php artisan make:seeder UserSeeder
Create an admin dashboard controller:

+++++ Here  Command: php artisan make:controller Admin/AdminDashboardController
---------------------------------------------------------------------------------------------------------------------

2. Middleware Alias Setup
Laravel 11 allows middleware aliases directly in bootstrap/app.php instead of modifying Kernel.php.
In bootstrap/app.php, add:
php

%%%%%%  Here  Code:

$middleware->alias([
    'role' => \App\Http\Middleware\RoleMiddleware::class,
]);

Purpose: This alias allows you to use the role middleware across your routes conveniently.
---------------------------------------------------------------------------------------------------------------------

3. Route Setup
Add an admin dashboard route in routes/web.php:
php
%%%%%%  Here  Code:
Route::get('admin/dashboard', [AdminDashboardController::class, 'index'])
    ->middleware(['auth', 'role:admin'])  // Protect the route with authentication and admin role checks
    ->name('admin/dashboard');

Details:
Protects the route so only authenticated users with the admin role can access it.
---------------------------------------------------------------------------------------------------------------------

4. Register admin.php Route File
Create a new file routes/admin.php to separate admin-specific routes.
Purpose: Organizing routes into separate files for better maintainability.
Register the admin.php file in bootstrap/app.php:
php
%%%%%%  Here  Code:
Route::middleware('web', 'auth', 'role:admin')
    ->prefix('admin')
    ->group(base_path('routes/admin.php'));

Details:
Uses middleware for auth and role:admin to protect admin routes.
Adds a prefix (/admin) to all routes defined in admin.php.
---------------------------------------------------------------------------------------------------------------------

Assets for Styles and JavaScript
Copy the assets folder into the public directory.
Purpose: To centralize all CSS and JavaScript files in one folder for easier access.

---------------------------------------------------------------------------------------------------------------------
For test the option forget password, I used a https://mailtrap.io/home

and the configuration on .env is
MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=33322390610922
MAIL_PASSWORD=9d4ba8be382c3c
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS="foo_park@example.com"
MAIL_FROM_NAME="${APP_NAME}"
 and I create a controller for that and put the next code
    // Check the response and show appropriate message
        toastr('Reset link sent in to your email', 'success');
        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);

---------------------------------------------------------------------------------------------------------------------

Install Yajra DataTables (Server-side Table Management)
Run the following command to install Yajra DataTables:

		%%%%%%%%%  code
		composer require yajra/laravel-datatables

What this does:

Installs the Yajra DataTables package, which allows you to manage tables with advanced interaction controls (pagination, sorting, filtering, etc.) on large datasets without heavy frontend manipulation.

DataTables Documentation
Visit the official Yajra DataTables documentation:
		Yajra DataTables Documentation (Laravel 11) https://yajrabox.com/docs/laravel-datatables/11.0/quick-starter

For frontend configuration and more table features, check:
DataTables Official Site open https://datatables.net/

Generate DataTables Class
To create a DataTable class for the Slider model, run:

		%%%%%%%%%%% code
		php artisan datatables:make Slider

What this does:

Generates a SliderDataTable class where you can define how your Slider model data will be handled and displayed.

Generate Factory for Test Data
To seed test data for the Slider model, create a factory:

		 %%%%%%%%%%%%%%% code
		php artisan make:factory SliderFactory
This will generate:

database/factories/SliderFactory.php
In the factory (SliderFactory.php), define how to populate the Slider table:

		%%%%%%%%%%% code
		return [
			'image' => '/uploads/test',
			'offer' => '50%',
			'title' => fake()->sentence(),
			'subtitle' => fake()->sentence(10),
			'short_description' => fake()->paragraph(2),
			'button_link' => fake()->url(),
			'status' => fake()->boolean()
		];
What this does:

Fills the Slider table with random test data (images, offers, titles, etc.) using Laravel's faker library.
Seed the Database with Test Data
Run Laravel's interactive shell (Tinker):
		 %%%%%%%%%%%%%%% code
		php artisan tinker
Create test data using the factory:
		%%%%%%%%%code
		\App\Models\Slider::factory(4)->create();
This command generates 4 Slider records in the database.

		Troubleshooting Errors (If Any)
If you encounter errors during factory creation (like factory() method not found):

		%%%%%%%%%%%% code
		composer update
Running composer update refreshes dependencies, ensuring that the model factories are registered properly.
Why Use This Workflow?
Yajra DataTables simplifies data table management by handling large datasets efficiently on the server-side.
Factories make it easy to seed test data, ensuring the application behaves as expected without manually inserting records.
This workflow streamlines development, especially when building admin panels or dashboards with complex table data.

---------------------------------------------------------------------------------------------------------------------

for cart-shopping-cart I used the command from the next url

https://github.com/anayarojo/laravel-shopping-cart
		composer require anayarojo/shoppingcart
		
---------------------------------------------------------------------------------------------------------------------	
  
	Laravel 10: Uses Providers/EventServiceProvider.php to manually register events and listeners.

	Laravel 11: Introduces event discovery, automatically registering events and listeners based on type hints in their handle or __invoke methods.
	
---------------------------------------------------------------------------------------------------------------------	
https://docs.stripe.com/payments?payments=popular

install in the project paypal, here the command code to do it
 
					composer require srmklive/paypal:~3.0


API credentials Paypal here:
https://developer.paypal.com/dashboard/applications/edit/SB:QVo1Ylh3eUNvc1gweThmeWNBUTRQd0tEaHFtamgxUmRIT053bkZkek1EWkUwMkstTVJOVElLdGVmRFBiV2pDakNGY3BMaVhOS3QwSm5JRHc=?appname=Default%20Application


For using Stripe in the project, install this is the command code

					composer require stripe/stripe-php

API credentials stripe here:
https://dashboard.stripe.com/dashboard


	Install the Razorpay SDK
	First, install the Razorpay PHP SDK via Composer. This will allow you to interact with the Razorpay API in your Laravel application.

	Run the following command in your terminal:
				
				composer require razorpay/razorpay


For Razorpay has different configuration
and install 
				
				composer require razorpay/razorpay:2.* 

Api Keys
--------
api_key:rzp_test_K7CipNQYyyMPiS
api_secret:zSBmNMorJrirOrnDrbOd1ALO

--------

package link: https://github.com/razorpay/razorpay-php

--------


Razorpay checkout js

------------

https://checkout.razorpay.com/v1/checkout.js


---------------------------------------------------------------------------------------------------------------------	

				View laravel.blade.php
						@foreach ($items as $item)
							{{ ++$loop->index }}. {{ $item }}
						@endforeach
	the 
	
	++$loop->index 
	
	syntax is used to increment the index within a @foreach loop. The @foreach directive is used to iterate over a collection of items, and the $loop variable is available within the loop to provide useful information about the loop's state.
	'
	
---------------------------------------------------------------------------------------------------------------------	

Tutorial https://github.com/savanihd?tab=repositories laravel 11

For notification  I used pusher -> https://dashboard.pusher.com/ 

		account sisjna5@gmail.com
		password the same

Create a channel and follw the picture 

Pusher Channels

app_id = "1932286"
key = "8ff170cf6fa0b2a30d21"
secret = "97cfb1eecb833282779f"
cluster = "eu"

If you plan to broadcast your events using Pusher Channels, you should install the Pusher Channels PHP SDK using the Composer package manager:

composer require pusher/pusher-php-server 

				in laravel 10 file .env 
				BROADCAST_DRIVER=Pusher
				in laravel 11  .env 
				BROADCAST_CONNECTION=pusher


 Create config/broadcasting.php file manually if it does not already exist.
 
 then
 
 Client Side Installation

Laravel Echo is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by your server-side broadcasting driver. You may install Echo via the NPM package manager. In this example, we will also install the pusher-js package since Reverb utilizes the Pusher protocol for WebSocket subscriptions, channels, and messages:

npm install --save-dev laravel-echo pusher-js

in laravel 10 or less go to resources/js/botstrap.js
descommend , but for laravel 11 I have to create 
the nets code 

					import Echo from "laravel-echo";

					import Pusher from "pusher-js";
					window.Pusher = Pusher;

					window.Echo = new Echo({
						broadcaster: "pusher",
						key: pusherKey,
						cluster: pusherCluster ?? "mt1",
						wsHost: import.meta.env.VITE_PUSHER_HOST
							? import.meta.env.VITE_PUSHER_HOST
							: `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
						wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
						wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
						forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? "https") === "https",
						enabledTransports: ["ws", "wss"],
					});

 
 
after 
The code @vite(['resources/js/app.js', 'resources/js/admin.js']) is a directive used in Laravel 11 to handle Vite-based asset bundling and linking. It replaces the traditional @mix() directive used in older versions of Laravel (when Webpack was used with Laravel Mix). in admin/layouts/master.blade.php add @vite(['resources/js/app.js', 'resources/js/admin.js'])

after run the command 
				
				npm run dev

after I checked in the browser the url http://[::1]:5173/resources/js/admin.js

after 
			php artisan make:event RTOrderPlaceNotificationEvent













';
?>
